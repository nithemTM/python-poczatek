
#ZADANIE 1

Plik: main.py

from a2_2_metoda_zachowanie_obiektu.shop.order import Order, generate_order
from a2_2_metoda_zachowanie_obiektu.shop.product import Product
from a2_2_metoda_zachowanie_obiektu.shop.apple import Apple
from a2_2_metoda_zachowanie_obiektu.shop.potato import Potato


def call_object():
    # Zad 1

    auto = Product(name="Honda Accord", category_name="Cars", unit_price=120000)
    circular_saw = Product(name="Bosh Circular X100", category_name="Saw", unit_price=1000)

    auto.print_product()
    circular_saw.print_product()

    list_1 = [auto, circular_saw]
    order_1 = Order(customer_first_name="Mateusz", customer_last_name="Tokarski", products_list=list_1)
    order_1.print_order()
    generate_order()

    # Zad 2

    apple_ord = Apple(species="Golden", size=1, price=3)
    potato_ord = Potato(species="Lord", size=2, price=4)

    apple_ord.total_price_f(10)
    potato_ord.total_price_f(15)
    print(f'Cena jabłek total: {apple_ord.total_price}')
    print(f'Cena ziemniaków total: {potato_ord.total_price}')



if __name__ == "__main__":
    call_object()


Pakiet: shop
pliki ( __init__.py, order.py, product.py, apple.py, potato.py)

plik: order.py

import random
from a2_2_metoda_zachowanie_obiektu.shop.product import Product


class Order:
    def __init__(self, customer_first_name, customer_last_name, products_list=None):
        self.customer_first_name = customer_first_name
        self.customer_last_name = customer_last_name

        if products_list is None:
            products_list = []

        self.products_list = products_list

        total_price = 0
        for product in products_list:
            total_price += product.unit_price

        self.total_price = total_price

    def print_order(self):
        print('[ Show order ]')
        print(f'Customer Data: {self.customer_first_name} {self.customer_last_name}')
        print(f'Items of Order:')
        for product in self.products_list:
            product.print_product()
        print(f'Total cost of order: {self.total_price}')


def generate_order():

    a = random.randint(7, 20)
    product_list = []
    b = random.sample(range(1, a + 1), 6)
    for prod in b:
        product = Product(name=f"Product-{str(prod)}", category_name=f"Some category-{prod}",
                          unit_price=random.randint(1, 50))
        product_list.append(product)

    random_order = Order(customer_first_name="Mateusz", customer_last_name="Tokarski",
                         products_list=product_list)
    random_order.print_order()


plik: product.py

class Product:
    def __init__(self, name, category_name, unit_price):
        self.name = name
        self.category_name = category_name
        self.unit_price = int(unit_price)

    def print_product(self):
        print(f'Name: {self.name} - Category: {self.category_name} - Unit Price: {self.unit_price}')


plik: apple.py

class Apple:
    def __init__(self, species, size, price):
        self.species = species
        self.size = size
        self.price = price
        self.total_price = 0

    def total_price_f(self, weight):
        self.total_price = weight * self.price



plik: potato.py

class Potato:
    def __init__(self, species="Lord", size=1, price=0):
        self.species = species
        self.size = size
        self.price = price
        self.total_price = 0

    def total_price_f(self, weight):
        self.total_price = weight * self.price



###################################################################################


#ZADANIE 2








###################################################################################


#ZADANIE 3






###################################################################################


